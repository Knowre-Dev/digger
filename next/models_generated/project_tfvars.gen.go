// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newProjectTfvar(db *gorm.DB, opts ...gen.DOOption) projectTfvar {
	_projectTfvar := projectTfvar{}

	_projectTfvar.projectTfvarDo.UseDB(db, opts...)
	_projectTfvar.projectTfvarDo.UseModel(&model.ProjectTfvar{})

	tableName := _projectTfvar.projectTfvarDo.TableName()
	_projectTfvar.ALL = field.NewAsterisk(tableName)
	_projectTfvar.ID = field.NewString(tableName, "id")
	_projectTfvar.ProjectID = field.NewString(tableName, "project_id")
	_projectTfvar.Tfvars = field.NewString(tableName, "tfvars")
	_projectTfvar.UpdatedAt = field.NewTime(tableName, "updated_at")

	_projectTfvar.fillFieldMap()

	return _projectTfvar
}

type projectTfvar struct {
	projectTfvarDo

	ALL       field.Asterisk
	ID        field.String
	ProjectID field.String
	Tfvars    field.String
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p projectTfvar) Table(newTableName string) *projectTfvar {
	p.projectTfvarDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectTfvar) As(alias string) *projectTfvar {
	p.projectTfvarDo.DO = *(p.projectTfvarDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectTfvar) updateTableName(table string) *projectTfvar {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.ProjectID = field.NewString(table, "project_id")
	p.Tfvars = field.NewString(table, "tfvars")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *projectTfvar) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectTfvar) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["tfvars"] = p.Tfvars
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p projectTfvar) clone(db *gorm.DB) projectTfvar {
	p.projectTfvarDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectTfvar) replaceDB(db *gorm.DB) projectTfvar {
	p.projectTfvarDo.ReplaceDB(db)
	return p
}

type projectTfvarDo struct{ gen.DO }

type IProjectTfvarDo interface {
	gen.SubQuery
	Debug() IProjectTfvarDo
	WithContext(ctx context.Context) IProjectTfvarDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectTfvarDo
	WriteDB() IProjectTfvarDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectTfvarDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectTfvarDo
	Not(conds ...gen.Condition) IProjectTfvarDo
	Or(conds ...gen.Condition) IProjectTfvarDo
	Select(conds ...field.Expr) IProjectTfvarDo
	Where(conds ...gen.Condition) IProjectTfvarDo
	Order(conds ...field.Expr) IProjectTfvarDo
	Distinct(cols ...field.Expr) IProjectTfvarDo
	Omit(cols ...field.Expr) IProjectTfvarDo
	Join(table schema.Tabler, on ...field.Expr) IProjectTfvarDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTfvarDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectTfvarDo
	Group(cols ...field.Expr) IProjectTfvarDo
	Having(conds ...gen.Condition) IProjectTfvarDo
	Limit(limit int) IProjectTfvarDo
	Offset(offset int) IProjectTfvarDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTfvarDo
	Unscoped() IProjectTfvarDo
	Create(values ...*model.ProjectTfvar) error
	CreateInBatches(values []*model.ProjectTfvar, batchSize int) error
	Save(values ...*model.ProjectTfvar) error
	First() (*model.ProjectTfvar, error)
	Take() (*model.ProjectTfvar, error)
	Last() (*model.ProjectTfvar, error)
	Find() ([]*model.ProjectTfvar, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectTfvar, err error)
	FindInBatches(result *[]*model.ProjectTfvar, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectTfvar) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectTfvarDo
	Assign(attrs ...field.AssignExpr) IProjectTfvarDo
	Joins(fields ...field.RelationField) IProjectTfvarDo
	Preload(fields ...field.RelationField) IProjectTfvarDo
	FirstOrInit() (*model.ProjectTfvar, error)
	FirstOrCreate() (*model.ProjectTfvar, error)
	FindByPage(offset int, limit int) (result []*model.ProjectTfvar, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectTfvarDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectTfvarDo) Debug() IProjectTfvarDo {
	return p.withDO(p.DO.Debug())
}

func (p projectTfvarDo) WithContext(ctx context.Context) IProjectTfvarDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectTfvarDo) ReadDB() IProjectTfvarDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectTfvarDo) WriteDB() IProjectTfvarDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectTfvarDo) Session(config *gorm.Session) IProjectTfvarDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectTfvarDo) Clauses(conds ...clause.Expression) IProjectTfvarDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectTfvarDo) Returning(value interface{}, columns ...string) IProjectTfvarDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectTfvarDo) Not(conds ...gen.Condition) IProjectTfvarDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectTfvarDo) Or(conds ...gen.Condition) IProjectTfvarDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectTfvarDo) Select(conds ...field.Expr) IProjectTfvarDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectTfvarDo) Where(conds ...gen.Condition) IProjectTfvarDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectTfvarDo) Order(conds ...field.Expr) IProjectTfvarDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectTfvarDo) Distinct(cols ...field.Expr) IProjectTfvarDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectTfvarDo) Omit(cols ...field.Expr) IProjectTfvarDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectTfvarDo) Join(table schema.Tabler, on ...field.Expr) IProjectTfvarDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectTfvarDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectTfvarDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectTfvarDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectTfvarDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectTfvarDo) Group(cols ...field.Expr) IProjectTfvarDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectTfvarDo) Having(conds ...gen.Condition) IProjectTfvarDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectTfvarDo) Limit(limit int) IProjectTfvarDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectTfvarDo) Offset(offset int) IProjectTfvarDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectTfvarDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectTfvarDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectTfvarDo) Unscoped() IProjectTfvarDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectTfvarDo) Create(values ...*model.ProjectTfvar) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectTfvarDo) CreateInBatches(values []*model.ProjectTfvar, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectTfvarDo) Save(values ...*model.ProjectTfvar) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectTfvarDo) First() (*model.ProjectTfvar, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTfvar), nil
	}
}

func (p projectTfvarDo) Take() (*model.ProjectTfvar, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTfvar), nil
	}
}

func (p projectTfvarDo) Last() (*model.ProjectTfvar, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTfvar), nil
	}
}

func (p projectTfvarDo) Find() ([]*model.ProjectTfvar, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectTfvar), err
}

func (p projectTfvarDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectTfvar, err error) {
	buf := make([]*model.ProjectTfvar, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectTfvarDo) FindInBatches(result *[]*model.ProjectTfvar, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectTfvarDo) Attrs(attrs ...field.AssignExpr) IProjectTfvarDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectTfvarDo) Assign(attrs ...field.AssignExpr) IProjectTfvarDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectTfvarDo) Joins(fields ...field.RelationField) IProjectTfvarDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectTfvarDo) Preload(fields ...field.RelationField) IProjectTfvarDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectTfvarDo) FirstOrInit() (*model.ProjectTfvar, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTfvar), nil
	}
}

func (p projectTfvarDo) FirstOrCreate() (*model.ProjectTfvar, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectTfvar), nil
	}
}

func (p projectTfvarDo) FindByPage(offset int, limit int) (result []*model.ProjectTfvar, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectTfvarDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectTfvarDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectTfvarDo) Delete(models ...*model.ProjectTfvar) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectTfvarDo) withDO(do gen.Dao) *projectTfvarDo {
	p.DO = *do.(*gen.DO)
	return p
}
