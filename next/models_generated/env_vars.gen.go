// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newEnvVar(db *gorm.DB, opts ...gen.DOOption) envVar {
	_envVar := envVar{}

	_envVar.envVarDo.UseDB(db, opts...)
	_envVar.envVarDo.UseModel(&model.EnvVar{})

	tableName := _envVar.envVarDo.TableName()
	_envVar.ALL = field.NewAsterisk(tableName)
	_envVar.ID = field.NewString(tableName, "id")
	_envVar.ProjectID = field.NewString(tableName, "project_id")
	_envVar.Name = field.NewString(tableName, "name")
	_envVar.Value = field.NewString(tableName, "value")
	_envVar.UpdatedAt = field.NewTime(tableName, "updated_at")
	_envVar.IsSecret = field.NewBool(tableName, "is_secret")

	_envVar.fillFieldMap()

	return _envVar
}

type envVar struct {
	envVarDo

	ALL       field.Asterisk
	ID        field.String
	ProjectID field.String
	Name      field.String
	Value     field.String
	UpdatedAt field.Time
	IsSecret  field.Bool

	fieldMap map[string]field.Expr
}

func (e envVar) Table(newTableName string) *envVar {
	e.envVarDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e envVar) As(alias string) *envVar {
	e.envVarDo.DO = *(e.envVarDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *envVar) updateTableName(table string) *envVar {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.ProjectID = field.NewString(table, "project_id")
	e.Name = field.NewString(table, "name")
	e.Value = field.NewString(table, "value")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.IsSecret = field.NewBool(table, "is_secret")

	e.fillFieldMap()

	return e
}

func (e *envVar) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *envVar) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["project_id"] = e.ProjectID
	e.fieldMap["name"] = e.Name
	e.fieldMap["value"] = e.Value
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["is_secret"] = e.IsSecret
}

func (e envVar) clone(db *gorm.DB) envVar {
	e.envVarDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e envVar) replaceDB(db *gorm.DB) envVar {
	e.envVarDo.ReplaceDB(db)
	return e
}

type envVarDo struct{ gen.DO }

type IEnvVarDo interface {
	gen.SubQuery
	Debug() IEnvVarDo
	WithContext(ctx context.Context) IEnvVarDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEnvVarDo
	WriteDB() IEnvVarDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEnvVarDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEnvVarDo
	Not(conds ...gen.Condition) IEnvVarDo
	Or(conds ...gen.Condition) IEnvVarDo
	Select(conds ...field.Expr) IEnvVarDo
	Where(conds ...gen.Condition) IEnvVarDo
	Order(conds ...field.Expr) IEnvVarDo
	Distinct(cols ...field.Expr) IEnvVarDo
	Omit(cols ...field.Expr) IEnvVarDo
	Join(table schema.Tabler, on ...field.Expr) IEnvVarDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEnvVarDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEnvVarDo
	Group(cols ...field.Expr) IEnvVarDo
	Having(conds ...gen.Condition) IEnvVarDo
	Limit(limit int) IEnvVarDo
	Offset(offset int) IEnvVarDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEnvVarDo
	Unscoped() IEnvVarDo
	Create(values ...*model.EnvVar) error
	CreateInBatches(values []*model.EnvVar, batchSize int) error
	Save(values ...*model.EnvVar) error
	First() (*model.EnvVar, error)
	Take() (*model.EnvVar, error)
	Last() (*model.EnvVar, error)
	Find() ([]*model.EnvVar, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnvVar, err error)
	FindInBatches(result *[]*model.EnvVar, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EnvVar) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEnvVarDo
	Assign(attrs ...field.AssignExpr) IEnvVarDo
	Joins(fields ...field.RelationField) IEnvVarDo
	Preload(fields ...field.RelationField) IEnvVarDo
	FirstOrInit() (*model.EnvVar, error)
	FirstOrCreate() (*model.EnvVar, error)
	FindByPage(offset int, limit int) (result []*model.EnvVar, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEnvVarDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e envVarDo) Debug() IEnvVarDo {
	return e.withDO(e.DO.Debug())
}

func (e envVarDo) WithContext(ctx context.Context) IEnvVarDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e envVarDo) ReadDB() IEnvVarDo {
	return e.Clauses(dbresolver.Read)
}

func (e envVarDo) WriteDB() IEnvVarDo {
	return e.Clauses(dbresolver.Write)
}

func (e envVarDo) Session(config *gorm.Session) IEnvVarDo {
	return e.withDO(e.DO.Session(config))
}

func (e envVarDo) Clauses(conds ...clause.Expression) IEnvVarDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e envVarDo) Returning(value interface{}, columns ...string) IEnvVarDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e envVarDo) Not(conds ...gen.Condition) IEnvVarDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e envVarDo) Or(conds ...gen.Condition) IEnvVarDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e envVarDo) Select(conds ...field.Expr) IEnvVarDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e envVarDo) Where(conds ...gen.Condition) IEnvVarDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e envVarDo) Order(conds ...field.Expr) IEnvVarDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e envVarDo) Distinct(cols ...field.Expr) IEnvVarDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e envVarDo) Omit(cols ...field.Expr) IEnvVarDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e envVarDo) Join(table schema.Tabler, on ...field.Expr) IEnvVarDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e envVarDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEnvVarDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e envVarDo) RightJoin(table schema.Tabler, on ...field.Expr) IEnvVarDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e envVarDo) Group(cols ...field.Expr) IEnvVarDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e envVarDo) Having(conds ...gen.Condition) IEnvVarDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e envVarDo) Limit(limit int) IEnvVarDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e envVarDo) Offset(offset int) IEnvVarDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e envVarDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEnvVarDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e envVarDo) Unscoped() IEnvVarDo {
	return e.withDO(e.DO.Unscoped())
}

func (e envVarDo) Create(values ...*model.EnvVar) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e envVarDo) CreateInBatches(values []*model.EnvVar, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e envVarDo) Save(values ...*model.EnvVar) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e envVarDo) First() (*model.EnvVar, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvVar), nil
	}
}

func (e envVarDo) Take() (*model.EnvVar, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvVar), nil
	}
}

func (e envVarDo) Last() (*model.EnvVar, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvVar), nil
	}
}

func (e envVarDo) Find() ([]*model.EnvVar, error) {
	result, err := e.DO.Find()
	return result.([]*model.EnvVar), err
}

func (e envVarDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnvVar, err error) {
	buf := make([]*model.EnvVar, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e envVarDo) FindInBatches(result *[]*model.EnvVar, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e envVarDo) Attrs(attrs ...field.AssignExpr) IEnvVarDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e envVarDo) Assign(attrs ...field.AssignExpr) IEnvVarDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e envVarDo) Joins(fields ...field.RelationField) IEnvVarDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e envVarDo) Preload(fields ...field.RelationField) IEnvVarDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e envVarDo) FirstOrInit() (*model.EnvVar, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvVar), nil
	}
}

func (e envVarDo) FirstOrCreate() (*model.EnvVar, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvVar), nil
	}
}

func (e envVarDo) FindByPage(offset int, limit int) (result []*model.EnvVar, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e envVarDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e envVarDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e envVarDo) Delete(models ...*model.EnvVar) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *envVarDo) withDO(do gen.Dao) *envVarDo {
	e.DO = *do.(*gen.DO)
	return e
}
