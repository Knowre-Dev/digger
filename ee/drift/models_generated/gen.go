// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                         = new(Query)
	DiggerCiJob               *diggerCiJob
	DiggerCiJobToken          *diggerCiJobToken
	GithubAppInstallationLink *githubAppInstallationLink
	OrgSetting                *orgSetting
	Organisation              *organisation
	Project                   *project
	Repo                      *repo
	User                      *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	DiggerCiJob = &Q.DiggerCiJob
	DiggerCiJobToken = &Q.DiggerCiJobToken
	GithubAppInstallationLink = &Q.GithubAppInstallationLink
	OrgSetting = &Q.OrgSetting
	Organisation = &Q.Organisation
	Project = &Q.Project
	Repo = &Q.Repo
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                        db,
		DiggerCiJob:               newDiggerCiJob(db, opts...),
		DiggerCiJobToken:          newDiggerCiJobToken(db, opts...),
		GithubAppInstallationLink: newGithubAppInstallationLink(db, opts...),
		OrgSetting:                newOrgSetting(db, opts...),
		Organisation:              newOrganisation(db, opts...),
		Project:                   newProject(db, opts...),
		Repo:                      newRepo(db, opts...),
		User:                      newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	DiggerCiJob               diggerCiJob
	DiggerCiJobToken          diggerCiJobToken
	GithubAppInstallationLink githubAppInstallationLink
	OrgSetting                orgSetting
	Organisation              organisation
	Project                   project
	Repo                      repo
	User                      user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		DiggerCiJob:               q.DiggerCiJob.clone(db),
		DiggerCiJobToken:          q.DiggerCiJobToken.clone(db),
		GithubAppInstallationLink: q.GithubAppInstallationLink.clone(db),
		OrgSetting:                q.OrgSetting.clone(db),
		Organisation:              q.Organisation.clone(db),
		Project:                   q.Project.clone(db),
		Repo:                      q.Repo.clone(db),
		User:                      q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		DiggerCiJob:               q.DiggerCiJob.replaceDB(db),
		DiggerCiJobToken:          q.DiggerCiJobToken.replaceDB(db),
		GithubAppInstallationLink: q.GithubAppInstallationLink.replaceDB(db),
		OrgSetting:                q.OrgSetting.replaceDB(db),
		Organisation:              q.Organisation.replaceDB(db),
		Project:                   q.Project.replaceDB(db),
		Repo:                      q.Repo.replaceDB(db),
		User:                      q.User.replaceDB(db),
	}
}

type queryCtx struct {
	DiggerCiJob               IDiggerCiJobDo
	DiggerCiJobToken          IDiggerCiJobTokenDo
	GithubAppInstallationLink IGithubAppInstallationLinkDo
	OrgSetting                IOrgSettingDo
	Organisation              IOrganisationDo
	Project                   IProjectDo
	Repo                      IRepoDo
	User                      IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		DiggerCiJob:               q.DiggerCiJob.WithContext(ctx),
		DiggerCiJobToken:          q.DiggerCiJobToken.WithContext(ctx),
		GithubAppInstallationLink: q.GithubAppInstallationLink.WithContext(ctx),
		OrgSetting:                q.OrgSetting.WithContext(ctx),
		Organisation:              q.Organisation.WithContext(ctx),
		Project:                   q.Project.WithContext(ctx),
		Repo:                      q.Repo.WithContext(ctx),
		User:                      q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
