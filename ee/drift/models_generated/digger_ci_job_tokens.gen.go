// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/ee/drift/model"
)

func newDiggerCiJobToken(db *gorm.DB, opts ...gen.DOOption) diggerCiJobToken {
	_diggerCiJobToken := diggerCiJobToken{}

	_diggerCiJobToken.diggerCiJobTokenDo.UseDB(db, opts...)
	_diggerCiJobToken.diggerCiJobTokenDo.UseModel(&model.DiggerCiJobToken{})

	tableName := _diggerCiJobToken.diggerCiJobTokenDo.TableName()
	_diggerCiJobToken.ALL = field.NewAsterisk(tableName)
	_diggerCiJobToken.ID = field.NewString(tableName, "id")
	_diggerCiJobToken.CreatedAt = field.NewTime(tableName, "created_at")
	_diggerCiJobToken.UpdatedAt = field.NewTime(tableName, "updated_at")
	_diggerCiJobToken.DeletedAt = field.NewField(tableName, "deleted_at")
	_diggerCiJobToken.Value = field.NewString(tableName, "value")
	_diggerCiJobToken.Expiry = field.NewTime(tableName, "expiry")
	_diggerCiJobToken.OrganisationID = field.NewString(tableName, "organisation_id")
	_diggerCiJobToken.Type = field.NewString(tableName, "type")

	_diggerCiJobToken.fillFieldMap()

	return _diggerCiJobToken
}

type diggerCiJobToken struct {
	diggerCiJobTokenDo

	ALL            field.Asterisk
	ID             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	Value          field.String
	Expiry         field.Time
	OrganisationID field.String
	Type           field.String

	fieldMap map[string]field.Expr
}

func (d diggerCiJobToken) Table(newTableName string) *diggerCiJobToken {
	d.diggerCiJobTokenDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d diggerCiJobToken) As(alias string) *diggerCiJobToken {
	d.diggerCiJobTokenDo.DO = *(d.diggerCiJobTokenDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *diggerCiJobToken) updateTableName(table string) *diggerCiJobToken {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.Value = field.NewString(table, "value")
	d.Expiry = field.NewTime(table, "expiry")
	d.OrganisationID = field.NewString(table, "organisation_id")
	d.Type = field.NewString(table, "type")

	d.fillFieldMap()

	return d
}

func (d *diggerCiJobToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *diggerCiJobToken) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["value"] = d.Value
	d.fieldMap["expiry"] = d.Expiry
	d.fieldMap["organisation_id"] = d.OrganisationID
	d.fieldMap["type"] = d.Type
}

func (d diggerCiJobToken) clone(db *gorm.DB) diggerCiJobToken {
	d.diggerCiJobTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d diggerCiJobToken) replaceDB(db *gorm.DB) diggerCiJobToken {
	d.diggerCiJobTokenDo.ReplaceDB(db)
	return d
}

type diggerCiJobTokenDo struct{ gen.DO }

type IDiggerCiJobTokenDo interface {
	gen.SubQuery
	Debug() IDiggerCiJobTokenDo
	WithContext(ctx context.Context) IDiggerCiJobTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDiggerCiJobTokenDo
	WriteDB() IDiggerCiJobTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDiggerCiJobTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDiggerCiJobTokenDo
	Not(conds ...gen.Condition) IDiggerCiJobTokenDo
	Or(conds ...gen.Condition) IDiggerCiJobTokenDo
	Select(conds ...field.Expr) IDiggerCiJobTokenDo
	Where(conds ...gen.Condition) IDiggerCiJobTokenDo
	Order(conds ...field.Expr) IDiggerCiJobTokenDo
	Distinct(cols ...field.Expr) IDiggerCiJobTokenDo
	Omit(cols ...field.Expr) IDiggerCiJobTokenDo
	Join(table schema.Tabler, on ...field.Expr) IDiggerCiJobTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerCiJobTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDiggerCiJobTokenDo
	Group(cols ...field.Expr) IDiggerCiJobTokenDo
	Having(conds ...gen.Condition) IDiggerCiJobTokenDo
	Limit(limit int) IDiggerCiJobTokenDo
	Offset(offset int) IDiggerCiJobTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerCiJobTokenDo
	Unscoped() IDiggerCiJobTokenDo
	Create(values ...*model.DiggerCiJobToken) error
	CreateInBatches(values []*model.DiggerCiJobToken, batchSize int) error
	Save(values ...*model.DiggerCiJobToken) error
	First() (*model.DiggerCiJobToken, error)
	Take() (*model.DiggerCiJobToken, error)
	Last() (*model.DiggerCiJobToken, error)
	Find() ([]*model.DiggerCiJobToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerCiJobToken, err error)
	FindInBatches(result *[]*model.DiggerCiJobToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DiggerCiJobToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDiggerCiJobTokenDo
	Assign(attrs ...field.AssignExpr) IDiggerCiJobTokenDo
	Joins(fields ...field.RelationField) IDiggerCiJobTokenDo
	Preload(fields ...field.RelationField) IDiggerCiJobTokenDo
	FirstOrInit() (*model.DiggerCiJobToken, error)
	FirstOrCreate() (*model.DiggerCiJobToken, error)
	FindByPage(offset int, limit int) (result []*model.DiggerCiJobToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDiggerCiJobTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d diggerCiJobTokenDo) Debug() IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Debug())
}

func (d diggerCiJobTokenDo) WithContext(ctx context.Context) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d diggerCiJobTokenDo) ReadDB() IDiggerCiJobTokenDo {
	return d.Clauses(dbresolver.Read)
}

func (d diggerCiJobTokenDo) WriteDB() IDiggerCiJobTokenDo {
	return d.Clauses(dbresolver.Write)
}

func (d diggerCiJobTokenDo) Session(config *gorm.Session) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Session(config))
}

func (d diggerCiJobTokenDo) Clauses(conds ...clause.Expression) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d diggerCiJobTokenDo) Returning(value interface{}, columns ...string) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d diggerCiJobTokenDo) Not(conds ...gen.Condition) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d diggerCiJobTokenDo) Or(conds ...gen.Condition) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d diggerCiJobTokenDo) Select(conds ...field.Expr) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d diggerCiJobTokenDo) Where(conds ...gen.Condition) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d diggerCiJobTokenDo) Order(conds ...field.Expr) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d diggerCiJobTokenDo) Distinct(cols ...field.Expr) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d diggerCiJobTokenDo) Omit(cols ...field.Expr) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d diggerCiJobTokenDo) Join(table schema.Tabler, on ...field.Expr) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d diggerCiJobTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d diggerCiJobTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d diggerCiJobTokenDo) Group(cols ...field.Expr) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d diggerCiJobTokenDo) Having(conds ...gen.Condition) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d diggerCiJobTokenDo) Limit(limit int) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d diggerCiJobTokenDo) Offset(offset int) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d diggerCiJobTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d diggerCiJobTokenDo) Unscoped() IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Unscoped())
}

func (d diggerCiJobTokenDo) Create(values ...*model.DiggerCiJobToken) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d diggerCiJobTokenDo) CreateInBatches(values []*model.DiggerCiJobToken, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d diggerCiJobTokenDo) Save(values ...*model.DiggerCiJobToken) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d diggerCiJobTokenDo) First() (*model.DiggerCiJobToken, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerCiJobToken), nil
	}
}

func (d diggerCiJobTokenDo) Take() (*model.DiggerCiJobToken, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerCiJobToken), nil
	}
}

func (d diggerCiJobTokenDo) Last() (*model.DiggerCiJobToken, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerCiJobToken), nil
	}
}

func (d diggerCiJobTokenDo) Find() ([]*model.DiggerCiJobToken, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiggerCiJobToken), err
}

func (d diggerCiJobTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiggerCiJobToken, err error) {
	buf := make([]*model.DiggerCiJobToken, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d diggerCiJobTokenDo) FindInBatches(result *[]*model.DiggerCiJobToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d diggerCiJobTokenDo) Attrs(attrs ...field.AssignExpr) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d diggerCiJobTokenDo) Assign(attrs ...field.AssignExpr) IDiggerCiJobTokenDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d diggerCiJobTokenDo) Joins(fields ...field.RelationField) IDiggerCiJobTokenDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d diggerCiJobTokenDo) Preload(fields ...field.RelationField) IDiggerCiJobTokenDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d diggerCiJobTokenDo) FirstOrInit() (*model.DiggerCiJobToken, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerCiJobToken), nil
	}
}

func (d diggerCiJobTokenDo) FirstOrCreate() (*model.DiggerCiJobToken, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiggerCiJobToken), nil
	}
}

func (d diggerCiJobTokenDo) FindByPage(offset int, limit int) (result []*model.DiggerCiJobToken, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d diggerCiJobTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d diggerCiJobTokenDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d diggerCiJobTokenDo) Delete(models ...*model.DiggerCiJobToken) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *diggerCiJobTokenDo) withDO(do gen.Dao) *diggerCiJobTokenDo {
	d.DO = *do.(*gen.DO)
	return d
}
